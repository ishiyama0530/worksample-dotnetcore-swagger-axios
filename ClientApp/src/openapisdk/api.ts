// tslint:disable
/**
 * My API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface RequestModel
 */
export interface RequestModel {
    /**
     * 
     * @type {string}
     * @memberof RequestModel
     */
    param: string;
}
/**
 * 
 * @export
 * @interface ResponseModel
 */
export interface ResponseModel {
    /**
     * 
     * @type {string}
     * @memberof ResponseModel
     */
    value: string;
}
/**
 * 
 * @export
 * @interface WeatherForecast
 */
export interface WeatherForecast {
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    date?: string;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    temperatureC?: number;
    /**
     * 
     * @type {number}
     * @memberof WeatherForecast
     */
    temperatureF?: number;
    /**
     * 
     * @type {string}
     * @memberof WeatherForecast
     */
    summary?: string | null;
}

/**
 * SampleApi - axios parameter creator
 * @export
 */
export const SampleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ほげほげ
         * @param {string} id 
         * @param {RequestModel} requestModel ふがふが
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        samplePost: async (id: string, requestModel: RequestModel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling samplePost.');
            }
            // verify required parameter 'requestModel' is not null or undefined
            if (requestModel === null || requestModel === undefined) {
                throw new RequiredError('requestModel','Required parameter requestModel was null or undefined when calling samplePost.');
            }
            const localVarPath = `/Sample/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestModel !== undefined ? requestModel : {}) : (requestModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SampleApi - functional programming interface
 * @export
 */
export const SampleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ほげほげ
         * @param {string} id 
         * @param {RequestModel} requestModel ふがふが
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async samplePost(id: string, requestModel: RequestModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await SampleApiAxiosParamCreator(configuration).samplePost(id, requestModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SampleApi - factory interface
 * @export
 */
export const SampleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary ほげほげ
         * @param {string} id 
         * @param {RequestModel} requestModel ふがふが
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        samplePost(id: string, requestModel: RequestModel, options?: any): AxiosPromise<ResponseModel> {
            return SampleApiFp(configuration).samplePost(id, requestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SampleApi - object-oriented interface
 * @export
 * @class SampleApi
 * @extends {BaseAPI}
 */
export class SampleApi extends BaseAPI {
    /**
     * 
     * @summary ほげほげ
     * @param {string} id 
     * @param {RequestModel} requestModel ふがふが
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SampleApi
     */
    public samplePost(id: string, requestModel: RequestModel, options?: any) {
        return SampleApiFp(this.configuration).samplePost(id, requestModel, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * WeatherForecastApi - axios parameter creator
 * @export
 */
export const WeatherForecastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/WeatherForecast`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeatherForecastApi - functional programming interface
 * @export
 */
export const WeatherForecastApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async weatherForecastGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WeatherForecast>>> {
            const localVarAxiosArgs = await WeatherForecastApiAxiosParamCreator(configuration).weatherForecastGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WeatherForecastApi - factory interface
 * @export
 */
export const WeatherForecastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        weatherForecastGet(options?: any): AxiosPromise<Array<WeatherForecast>> {
            return WeatherForecastApiFp(configuration).weatherForecastGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeatherForecastApi - object-oriented interface
 * @export
 * @class WeatherForecastApi
 * @extends {BaseAPI}
 */
export class WeatherForecastApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeatherForecastApi
     */
    public weatherForecastGet(options?: any) {
        return WeatherForecastApiFp(this.configuration).weatherForecastGet(options).then((request) => request(this.axios, this.basePath));
    }

}


